searchState.loadedDescShard("recursive_array", 0, "an empty recursive array.\nan empty recrusive array.\nthe length of this array\na trait which when implemented by some type states that …\na recursive array wrapper which wraps a regular rust array …\na recursive array which concatenates 2 recursive arrays.\na recursive array which multiplies the given inner …\na recursive array with a single item.\nappends a recrusive array to the back of this array.\nappends a recrusive array to the front of this array.\nreturns the elements of this array as a mutable slice.\nreturns the elements of this array as a slice.\nreturns an empty recursive array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconverts the given array to a recursive array.\nconverts the given mutable slice to a recursive array …\nconverts the given slice to a recursive array reference. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of this recursive array.\ncreates a new recrusive array with a single item.\ncreates a new recrusive array which concatenates the 2 …\ncreates a new recursive array wrapper which wraps the …\ncreates a new recursive array multiplier with the given …\npops an element from the back of this array. returns a …\npops an element from the front of this array. returns a …\nappends an element to the back of this array.\nappends an element to the fron of this array.\na macro for instantiating a recursive array with the given …\na macro for getting the type of a generic array with the …\nconverts this recrusive array to a regular array (<code>[T; N]</code>).")